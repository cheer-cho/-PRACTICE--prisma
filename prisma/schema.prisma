// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  firstName        String
  lastName         String
  age              Int
  email            String          @unique
  password         String
  role             Role            @default(BASIC)
  somethingJson    Json
  writtenPosts     Post[]          @relation("WrittenPosts")
  favoritePosts    Post[]          @relation("FavoritePosts")
  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?         @unique

  @@unique([age, firstName, lastName])
  @@index([email])
}

model UserPreference {
  id          String  @id @default(uuid())
  emailUpdate Boolean
  user        User?
}

model Post {
  id            String     @id @default(uuid())
  title         String
  averageRating Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  favoritedBy   User?      @relation("FavoritePosts", fields: [favoriteById], references: [id])
  favoriteById  String?
  category      Category[]

  // @@id([title, authorId]) ==> define composite id
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  BASIC
  ADMIN
}
